
STM32F407VG_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000604  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800078c  08000794  00010794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  0800078c  0800078c  0001078c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000790  08000790  00010790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010794  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010794  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001d6f  00000000  00000000  000107c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000696  00000000  00000000  00012533  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000002e8  00000000  00000000  00012bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000290  00000000  00000000  00012eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000101e  00000000  00000000  00013148  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000d35  00000000  00000000  00014166  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00014e9b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000b48  00000000  00000000  00014f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00015a64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000774 	.word	0x08000774

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000774 	.word	0x08000774

080001c8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
 80001da:	2300      	movs	r3, #0
 80001dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]
 80001e2:	e076      	b.n	80002d2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80001e4:	2201      	movs	r2, #1
 80001e6:	697b      	ldr	r3, [r7, #20]
 80001e8:	fa02 f303 	lsl.w	r3, r2, r3
 80001ec:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	693b      	ldr	r3, [r7, #16]
 80001f4:	4013      	ands	r3, r2
 80001f6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d165      	bne.n	80002cc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	697b      	ldr	r3, [r7, #20]
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	2103      	movs	r1, #3
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	43db      	mvns	r3, r3
 8000210:	401a      	ands	r2, r3
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	791b      	ldrb	r3, [r3, #4]
 800021e:	4619      	mov	r1, r3
 8000220:	697b      	ldr	r3, [r7, #20]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	fa01 f303 	lsl.w	r3, r1, r3
 8000228:	431a      	orrs	r2, r3
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	791b      	ldrb	r3, [r3, #4]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d003      	beq.n	800023e <GPIO_Init+0x76>
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	791b      	ldrb	r3, [r3, #4]
 800023a:	2b02      	cmp	r3, #2
 800023c:	d12e      	bne.n	800029c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689a      	ldr	r2, [r3, #8]
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	2103      	movs	r1, #3
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	43db      	mvns	r3, r3
 800024e:	401a      	ands	r2, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	689a      	ldr	r2, [r3, #8]
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	795b      	ldrb	r3, [r3, #5]
 800025c:	4619      	mov	r1, r3
 800025e:	697b      	ldr	r3, [r7, #20]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	fa01 f303 	lsl.w	r3, r1, r3
 8000266:	431a      	orrs	r2, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685a      	ldr	r2, [r3, #4]
 8000270:	697b      	ldr	r3, [r7, #20]
 8000272:	b29b      	uxth	r3, r3
 8000274:	2101      	movs	r1, #1
 8000276:	fa01 f303 	lsl.w	r3, r1, r3
 800027a:	43db      	mvns	r3, r3
 800027c:	401a      	ands	r2, r3
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	685a      	ldr	r2, [r3, #4]
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	799b      	ldrb	r3, [r3, #6]
 800028a:	4619      	mov	r1, r3
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	b29b      	uxth	r3, r3
 8000290:	fa01 f303 	lsl.w	r3, r1, r3
 8000294:	b29b      	uxth	r3, r3
 8000296:	431a      	orrs	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68da      	ldr	r2, [r3, #12]
 80002a0:	697b      	ldr	r3, [r7, #20]
 80002a2:	b29b      	uxth	r3, r3
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	2103      	movs	r1, #3
 80002a8:	fa01 f303 	lsl.w	r3, r1, r3
 80002ac:	43db      	mvns	r3, r3
 80002ae:	401a      	ands	r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	79db      	ldrb	r3, [r3, #7]
 80002bc:	4619      	mov	r1, r3
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	431a      	orrs	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	3301      	adds	r3, #1
 80002d0:	617b      	str	r3, [r7, #20]
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	2b0f      	cmp	r3, #15
 80002d6:	d985      	bls.n	80001e4 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80002d8:	bf00      	nop
 80002da:	371c      	adds	r7, #28
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	887a      	ldrh	r2, [r7, #2]
 80002f4:	831a      	strh	r2, [r3, #24]
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop

08000304 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	887a      	ldrh	r2, [r7, #2]
 8000314:	835a      	strh	r2, [r3, #26]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop

08000324 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d006      	beq.n	8000344 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000336:	490a      	ldr	r1, [pc, #40]	; (8000360 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000338:	4b09      	ldr	r3, [pc, #36]	; (8000360 <RCC_AHB1PeriphClockCmd+0x3c>)
 800033a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4313      	orrs	r3, r2
 8000340:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000342:	e006      	b.n	8000352 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000344:	4906      	ldr	r1, [pc, #24]	; (8000360 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	43db      	mvns	r3, r3
 800034e:	4013      	ands	r3, r2
 8000350:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40023800 	.word	0x40023800

08000364 <sleep>:
**  Abstract: main program
**
**===========================================================================
*/

void sleep(int val){
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0;i<val;i++){
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	e002      	b.n	8000378 <sleep+0x14>
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	3301      	adds	r3, #1
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	68fa      	ldr	r2, [r7, #12]
 800037c:	429a      	cmp	r2, r3
 800037e:	d3f8      	bcc.n	8000372 <sleep+0xe>
	}
}
 8000380:	bf00      	nop
 8000382:	3714      	adds	r7, #20
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr

0800038c <main>:

int main(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8000392:	2101      	movs	r1, #1
 8000394:	2008      	movs	r0, #8
 8000396:	f7ff ffc5 	bl	8000324 <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef initStruct;
  initStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 800039a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800039e:	607b      	str	r3, [r7, #4]
  initStruct.GPIO_Mode = GPIO_Mode_OUT;
 80003a0:	2301      	movs	r3, #1
 80003a2:	723b      	strb	r3, [r7, #8]
  initStruct.GPIO_OType = GPIO_OType_PP;
 80003a4:	2300      	movs	r3, #0
 80003a6:	72bb      	strb	r3, [r7, #10]
  initStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80003a8:	2301      	movs	r3, #1
 80003aa:	72fb      	strb	r3, [r7, #11]
  initStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80003ac:	2302      	movs	r3, #2
 80003ae:	727b      	strb	r3, [r7, #9]
  GPIO_Init(GPIOD,&initStruct);
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	4619      	mov	r1, r3
 80003b4:	4850      	ldr	r0, [pc, #320]	; (80004f8 <main+0x16c>)
 80003b6:	f7ff ff07 	bl	80001c8 <GPIO_Init>

  /* TODO - Add your application code here */

  /* Infinite loop */

  int val = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60fb      	str	r3, [r7, #12]

  while (1)
  {
	  for(int i = 1; i<40; i++) {
 80003be:	2301      	movs	r3, #1
 80003c0:	617b      	str	r3, [r7, #20]
 80003c2:	e047      	b.n	8000454 <main+0xc8>

		  val = 3000000/i;
 80003c4:	4a4d      	ldr	r2, [pc, #308]	; (80004fc <main+0x170>)
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80003cc:	60fb      	str	r3, [r7, #12]

		  GPIO_SetBits(GPIOD,GPIO_Pin_12);
 80003ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d2:	4849      	ldr	r0, [pc, #292]	; (80004f8 <main+0x16c>)
 80003d4:	f7ff ff86 	bl	80002e4 <GPIO_SetBits>
		  sleep(val);
 80003d8:	68f8      	ldr	r0, [r7, #12]
 80003da:	f7ff ffc3 	bl	8000364 <sleep>
		  GPIO_ResetBits(GPIOD,GPIO_Pin_12);
 80003de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003e2:	4845      	ldr	r0, [pc, #276]	; (80004f8 <main+0x16c>)
 80003e4:	f7ff ff8e 	bl	8000304 <GPIO_ResetBits>
		  sleep(val);
 80003e8:	68f8      	ldr	r0, [r7, #12]
 80003ea:	f7ff ffbb 	bl	8000364 <sleep>

		  GPIO_SetBits(GPIOD,GPIO_Pin_13);
 80003ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f2:	4841      	ldr	r0, [pc, #260]	; (80004f8 <main+0x16c>)
 80003f4:	f7ff ff76 	bl	80002e4 <GPIO_SetBits>
		  sleep(val);
 80003f8:	68f8      	ldr	r0, [r7, #12]
 80003fa:	f7ff ffb3 	bl	8000364 <sleep>
		  GPIO_ResetBits(GPIOD,GPIO_Pin_13);
 80003fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000402:	483d      	ldr	r0, [pc, #244]	; (80004f8 <main+0x16c>)
 8000404:	f7ff ff7e 	bl	8000304 <GPIO_ResetBits>
		  sleep(val);
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f7ff ffab 	bl	8000364 <sleep>

		  GPIO_SetBits(GPIOD,GPIO_Pin_14);
 800040e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000412:	4839      	ldr	r0, [pc, #228]	; (80004f8 <main+0x16c>)
 8000414:	f7ff ff66 	bl	80002e4 <GPIO_SetBits>
		  sleep(val);
 8000418:	68f8      	ldr	r0, [r7, #12]
 800041a:	f7ff ffa3 	bl	8000364 <sleep>
		  GPIO_ResetBits(GPIOD,GPIO_Pin_14);
 800041e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000422:	4835      	ldr	r0, [pc, #212]	; (80004f8 <main+0x16c>)
 8000424:	f7ff ff6e 	bl	8000304 <GPIO_ResetBits>
		  sleep(val);
 8000428:	68f8      	ldr	r0, [r7, #12]
 800042a:	f7ff ff9b 	bl	8000364 <sleep>

		  GPIO_SetBits(GPIOD,GPIO_Pin_15);
 800042e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000432:	4831      	ldr	r0, [pc, #196]	; (80004f8 <main+0x16c>)
 8000434:	f7ff ff56 	bl	80002e4 <GPIO_SetBits>
		  sleep(val);
 8000438:	68f8      	ldr	r0, [r7, #12]
 800043a:	f7ff ff93 	bl	8000364 <sleep>
		  GPIO_ResetBits(GPIOD,GPIO_Pin_15);
 800043e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000442:	482d      	ldr	r0, [pc, #180]	; (80004f8 <main+0x16c>)
 8000444:	f7ff ff5e 	bl	8000304 <GPIO_ResetBits>
		  sleep(val);
 8000448:	68f8      	ldr	r0, [r7, #12]
 800044a:	f7ff ff8b 	bl	8000364 <sleep>

  int val = 0;

  while (1)
  {
	  for(int i = 1; i<40; i++) {
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	3301      	adds	r3, #1
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	2b27      	cmp	r3, #39	; 0x27
 8000458:	ddb4      	ble.n	80003c4 <main+0x38>
		  GPIO_ResetBits(GPIOD,GPIO_Pin_15);
		  sleep(val);

	  }

	  for(int i = 39; i>0; i--) {
 800045a:	2327      	movs	r3, #39	; 0x27
 800045c:	613b      	str	r3, [r7, #16]
 800045e:	e047      	b.n	80004f0 <main+0x164>

	  		  val = 3000000/i;
 8000460:	4a26      	ldr	r2, [pc, #152]	; (80004fc <main+0x170>)
 8000462:	693b      	ldr	r3, [r7, #16]
 8000464:	fb92 f3f3 	sdiv	r3, r2, r3
 8000468:	60fb      	str	r3, [r7, #12]

	  		  GPIO_SetBits(GPIOD,GPIO_Pin_12);
 800046a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800046e:	4822      	ldr	r0, [pc, #136]	; (80004f8 <main+0x16c>)
 8000470:	f7ff ff38 	bl	80002e4 <GPIO_SetBits>
	  		  sleep(val);
 8000474:	68f8      	ldr	r0, [r7, #12]
 8000476:	f7ff ff75 	bl	8000364 <sleep>
	  		  GPIO_ResetBits(GPIOD,GPIO_Pin_12);
 800047a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800047e:	481e      	ldr	r0, [pc, #120]	; (80004f8 <main+0x16c>)
 8000480:	f7ff ff40 	bl	8000304 <GPIO_ResetBits>
	  		  sleep(val);
 8000484:	68f8      	ldr	r0, [r7, #12]
 8000486:	f7ff ff6d 	bl	8000364 <sleep>

	  		  GPIO_SetBits(GPIOD,GPIO_Pin_13);
 800048a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800048e:	481a      	ldr	r0, [pc, #104]	; (80004f8 <main+0x16c>)
 8000490:	f7ff ff28 	bl	80002e4 <GPIO_SetBits>
	  		  sleep(val);
 8000494:	68f8      	ldr	r0, [r7, #12]
 8000496:	f7ff ff65 	bl	8000364 <sleep>
	  		  GPIO_ResetBits(GPIOD,GPIO_Pin_13);
 800049a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800049e:	4816      	ldr	r0, [pc, #88]	; (80004f8 <main+0x16c>)
 80004a0:	f7ff ff30 	bl	8000304 <GPIO_ResetBits>
	  		  sleep(val);
 80004a4:	68f8      	ldr	r0, [r7, #12]
 80004a6:	f7ff ff5d 	bl	8000364 <sleep>

	  		  GPIO_SetBits(GPIOD,GPIO_Pin_14);
 80004aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ae:	4812      	ldr	r0, [pc, #72]	; (80004f8 <main+0x16c>)
 80004b0:	f7ff ff18 	bl	80002e4 <GPIO_SetBits>
	  		  sleep(val);
 80004b4:	68f8      	ldr	r0, [r7, #12]
 80004b6:	f7ff ff55 	bl	8000364 <sleep>
	  		  GPIO_ResetBits(GPIOD,GPIO_Pin_14);
 80004ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004be:	480e      	ldr	r0, [pc, #56]	; (80004f8 <main+0x16c>)
 80004c0:	f7ff ff20 	bl	8000304 <GPIO_ResetBits>
	  		  sleep(val);
 80004c4:	68f8      	ldr	r0, [r7, #12]
 80004c6:	f7ff ff4d 	bl	8000364 <sleep>

	  		  GPIO_SetBits(GPIOD,GPIO_Pin_15);
 80004ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ce:	480a      	ldr	r0, [pc, #40]	; (80004f8 <main+0x16c>)
 80004d0:	f7ff ff08 	bl	80002e4 <GPIO_SetBits>
	  		  sleep(val);
 80004d4:	68f8      	ldr	r0, [r7, #12]
 80004d6:	f7ff ff45 	bl	8000364 <sleep>
	  		  GPIO_ResetBits(GPIOD,GPIO_Pin_15);
 80004da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <main+0x16c>)
 80004e0:	f7ff ff10 	bl	8000304 <GPIO_ResetBits>
	  		  sleep(val);
 80004e4:	68f8      	ldr	r0, [r7, #12]
 80004e6:	f7ff ff3d 	bl	8000364 <sleep>
		  GPIO_ResetBits(GPIOD,GPIO_Pin_15);
		  sleep(val);

	  }

	  for(int i = 39; i>0; i--) {
 80004ea:	693b      	ldr	r3, [r7, #16]
 80004ec:	3b01      	subs	r3, #1
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	dcb4      	bgt.n	8000460 <main+0xd4>
	  		  sleep(val);
	  		  GPIO_ResetBits(GPIOD,GPIO_Pin_15);
	  		  sleep(val);

	  }
  }
 80004f6:	e762      	b.n	80003be <main+0x32>
 80004f8:	40020c00 	.word	0x40020c00
 80004fc:	002dc6c0 	.word	0x002dc6c0

08000500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000500:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000538 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000504:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000506:	e003      	b.n	8000510 <LoopCopyDataInit>

08000508 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800050a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800050c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800050e:	3104      	adds	r1, #4

08000510 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000510:	480b      	ldr	r0, [pc, #44]	; (8000540 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000514:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000516:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000518:	d3f6      	bcc.n	8000508 <CopyDataInit>
  ldr  r2, =_sbss
 800051a:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800051c:	e002      	b.n	8000524 <LoopFillZerobss>

0800051e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800051e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000520:	f842 3b04 	str.w	r3, [r2], #4

08000524 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000524:	4b09      	ldr	r3, [pc, #36]	; (800054c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000526:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000528:	d3f9      	bcc.n	800051e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800052a:	f000 f84b 	bl	80005c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800052e:	f000 f8fb 	bl	8000728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000532:	f7ff ff2b 	bl	800038c <main>
  bx  lr    
 8000536:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000538:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800053c:	08000794 	.word	0x08000794
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000544:	20000000 	.word	0x20000000
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000548:	20000000 	.word	0x20000000
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800054c:	2000001c 	.word	0x2000001c

08000550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <ADC_IRQHandler>
	...

08000554 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000568:	e7fe      	b.n	8000568 <HardFault_Handler+0x4>
 800056a:	bf00      	nop

0800056c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000570:	e7fe      	b.n	8000570 <MemManage_Handler+0x4>
 8000572:	bf00      	nop

08000574 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000578:	e7fe      	b.n	8000578 <BusFault_Handler+0x4>
 800057a:	bf00      	nop

0800057c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000580:	e7fe      	b.n	8000580 <UsageFault_Handler+0x4>
 8000582:	bf00      	nop

08000584 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005c8:	4a16      	ldr	r2, [pc, #88]	; (8000624 <SystemInit+0x60>)
 80005ca:	4b16      	ldr	r3, [pc, #88]	; (8000624 <SystemInit+0x60>)
 80005cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80005d8:	4a13      	ldr	r2, [pc, #76]	; (8000628 <SystemInit+0x64>)
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <SystemInit+0x64>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f043 0301 	orr.w	r3, r3, #1
 80005e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <SystemInit+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005ea:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <SystemInit+0x64>)
 80005ec:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <SystemInit+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <SystemInit+0x64>)
 80005fc:	4a0b      	ldr	r2, [pc, #44]	; (800062c <SystemInit+0x68>)
 80005fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000600:	4a09      	ldr	r2, [pc, #36]	; (8000628 <SystemInit+0x64>)
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <SystemInit+0x64>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800060a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <SystemInit+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000612:	f000 f80d 	bl	8000630 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000616:	4b03      	ldr	r3, [pc, #12]	; (8000624 <SystemInit+0x60>)
 8000618:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800061c:	609a      	str	r2, [r3, #8]
#endif
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	40023800 	.word	0x40023800
 800062c:	24003010 	.word	0x24003010

08000630 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800063e:	4a36      	ldr	r2, [pc, #216]	; (8000718 <SetSysClock+0xe8>)
 8000640:	4b35      	ldr	r3, [pc, #212]	; (8000718 <SetSysClock+0xe8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000648:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800064a:	4b33      	ldr	r3, [pc, #204]	; (8000718 <SetSysClock+0xe8>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000652:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3301      	adds	r3, #1
 8000658:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d103      	bne.n	8000668 <SetSysClock+0x38>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000666:	d1f0      	bne.n	800064a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000668:	4b2b      	ldr	r3, [pc, #172]	; (8000718 <SetSysClock+0xe8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000670:	2b00      	cmp	r3, #0
 8000672:	d002      	beq.n	800067a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000674:	2301      	movs	r3, #1
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	e001      	b.n	800067e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800067a:	2300      	movs	r3, #0
 800067c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d142      	bne.n	800070a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000684:	4a24      	ldr	r2, [pc, #144]	; (8000718 <SetSysClock+0xe8>)
 8000686:	4b24      	ldr	r3, [pc, #144]	; (8000718 <SetSysClock+0xe8>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000690:	4a22      	ldr	r2, [pc, #136]	; (800071c <SetSysClock+0xec>)
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <SetSysClock+0xec>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800069a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800069c:	4a1e      	ldr	r2, [pc, #120]	; (8000718 <SetSysClock+0xe8>)
 800069e:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <SetSysClock+0xe8>)
 80006a0:	689b      	ldr	r3, [r3, #8]
 80006a2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80006a4:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <SetSysClock+0xe8>)
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <SetSysClock+0xe8>)
 80006a8:	689b      	ldr	r3, [r3, #8]
 80006aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ae:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80006b0:	4a19      	ldr	r2, [pc, #100]	; (8000718 <SetSysClock+0xe8>)
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <SetSysClock+0xe8>)
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80006ba:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80006bc:	4b16      	ldr	r3, [pc, #88]	; (8000718 <SetSysClock+0xe8>)
 80006be:	4a18      	ldr	r2, [pc, #96]	; (8000720 <SetSysClock+0xf0>)
 80006c0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006c2:	4a15      	ldr	r2, [pc, #84]	; (8000718 <SetSysClock+0xe8>)
 80006c4:	4b14      	ldr	r3, [pc, #80]	; (8000718 <SetSysClock+0xe8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006cc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006ce:	bf00      	nop
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <SetSysClock+0xe8>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0f9      	beq.n	80006d0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80006dc:	4b11      	ldr	r3, [pc, #68]	; (8000724 <SetSysClock+0xf4>)
 80006de:	f240 7205 	movw	r2, #1797	; 0x705
 80006e2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006e4:	4a0c      	ldr	r2, [pc, #48]	; (8000718 <SetSysClock+0xe8>)
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <SetSysClock+0xe8>)
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	f023 0303 	bic.w	r3, r3, #3
 80006ee:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80006f0:	4a09      	ldr	r2, [pc, #36]	; (8000718 <SetSysClock+0xe8>)
 80006f2:	4b09      	ldr	r3, [pc, #36]	; (8000718 <SetSysClock+0xe8>)
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	f043 0302 	orr.w	r3, r3, #2
 80006fa:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80006fc:	bf00      	nop
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <SetSysClock+0xe8>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	f003 030c 	and.w	r3, r3, #12
 8000706:	2b08      	cmp	r3, #8
 8000708:	d1f9      	bne.n	80006fe <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800070a:	bf00      	nop
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000
 8000720:	07405419 	.word	0x07405419
 8000724:	40023c00 	.word	0x40023c00

08000728 <__libc_init_array>:
 8000728:	b570      	push	{r4, r5, r6, lr}
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <__libc_init_array+0x3c>)
 800072c:	4c0e      	ldr	r4, [pc, #56]	; (8000768 <__libc_init_array+0x40>)
 800072e:	1ae4      	subs	r4, r4, r3
 8000730:	10a4      	asrs	r4, r4, #2
 8000732:	2500      	movs	r5, #0
 8000734:	461e      	mov	r6, r3
 8000736:	42a5      	cmp	r5, r4
 8000738:	d004      	beq.n	8000744 <__libc_init_array+0x1c>
 800073a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800073e:	4798      	blx	r3
 8000740:	3501      	adds	r5, #1
 8000742:	e7f8      	b.n	8000736 <__libc_init_array+0xe>
 8000744:	f000 f816 	bl	8000774 <_init>
 8000748:	4c08      	ldr	r4, [pc, #32]	; (800076c <__libc_init_array+0x44>)
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <__libc_init_array+0x48>)
 800074c:	1ae4      	subs	r4, r4, r3
 800074e:	10a4      	asrs	r4, r4, #2
 8000750:	2500      	movs	r5, #0
 8000752:	461e      	mov	r6, r3
 8000754:	42a5      	cmp	r5, r4
 8000756:	d004      	beq.n	8000762 <__libc_init_array+0x3a>
 8000758:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800075c:	4798      	blx	r3
 800075e:	3501      	adds	r5, #1
 8000760:	e7f8      	b.n	8000754 <__libc_init_array+0x2c>
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	0800078c 	.word	0x0800078c
 8000768:	0800078c 	.word	0x0800078c
 800076c:	08000790 	.word	0x08000790
 8000770:	0800078c 	.word	0x0800078c

08000774 <_init>:
 8000774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000776:	bf00      	nop
 8000778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077a:	bc08      	pop	{r3}
 800077c:	469e      	mov	lr, r3
 800077e:	4770      	bx	lr

08000780 <_fini>:
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000782:	bf00      	nop
 8000784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000786:	bc08      	pop	{r3}
 8000788:	469e      	mov	lr, r3
 800078a:	4770      	bx	lr
